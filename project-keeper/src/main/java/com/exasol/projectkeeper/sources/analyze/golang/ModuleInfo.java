package com.exasol.projectkeeper.sources.analyze.golang;

import java.util.Collections;
import java.util.List;

import javax.annotation.processing.Generated;

/**
 * This data class represents information about a Go module that was generated by executing the {@code go list} command
 * for getting the direct dependencies.
 */
class ModuleInfo {
    private final String moduleName;
    private final List<Dependency> dependencies;

    @Generated("SparkTools")
    private ModuleInfo(final Builder builder) {
        this.moduleName = builder.moduleName;
        this.dependencies = builder.dependencies;
    }

    static class Dependency {
        private final String moduleName;
        private final String version;

        @Generated("SparkTools")
        private Dependency(final Builder builder) {
            this.moduleName = builder.moduleName;
            this.version = builder.version;
        }

        /**
         * @return name of this module
         */
        public String getModuleName() {
            return this.moduleName;
        }

        /**
         * @return version of this dependency
         */
        public String getVersion() {
            return this.version;
        }

        @Generated("SparkTools")
        public static Builder builder() {
            return new Builder();
        }

        @Generated("SparkTools")
        public static final class Builder {
            private String moduleName;
            private String version;

            private Builder() {
            }

            public Builder moduleName(final String moduleName) {
                this.moduleName = moduleName;
                return this;
            }

            public Builder version(final String version) {
                this.version = version;
                return this;
            }

            public Dependency build() {
                return new Dependency(this);
            }
        }
    }

    /**
     * @return name of the module
     */
    public String getModuleName() {
        return this.moduleName;
    }

    /**
     * @return list of dependencies of this module
     */
    public List<Dependency> getDependencies() {
        return this.dependencies;
    }

    @Generated("SparkTools")
    public static Builder builder() {
        return new Builder();
    }

    @Generated("SparkTools")
    public static final class Builder {
        private String moduleName;
        private List<Dependency> dependencies = Collections.emptyList();

        private Builder() {
        }

        public Builder moduleName(final String moduleName) {
            this.moduleName = moduleName;
            return this;
        }

        public Builder dependencies(final List<Dependency> dependencies) {
            this.dependencies = dependencies;
            return this;
        }

        public ModuleInfo build() {
            return new ModuleInfo(this);
        }
    }
}
