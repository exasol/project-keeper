package com.exasol.projectkeeper.validators.pom;

import static com.exasol.projectkeeper.shared.config.ProjectKeeperModule.*;
import static com.exasol.projectkeeper.validators.pom.NodeBuilder.*;
import static com.exasol.projectkeeper.validators.pom.PomFileIO.trimWhitespace;

import java.util.*;
import java.util.stream.Collectors;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;

import com.exasol.errorreporting.ExaError;
import com.exasol.projectkeeper.RepoInfo;
import com.exasol.projectkeeper.shared.config.ProjectKeeperConfig;
import com.exasol.projectkeeper.shared.config.ProjectKeeperConfig.ParentPomRef;
import com.exasol.projectkeeper.shared.config.ProjectKeeperModule;
import com.exasol.projectkeeper.validators.pom.plugin.*;

import lombok.Data;

/**
 * This class generates the expected content for the auto-generated parent pom file.
 */
public class PomFileGenerator {
    private static final List<PluginTemplateGenerator> PLUGIN_GENERATORS = List.of(
            new SimplePluginTemplateGenerator("maven_templates/sonar-maven-plugin.xml", DEFAULT),
            new SimplePluginTemplateGenerator("maven_templates/maven-compiler-plugin.xml", DEFAULT),
            new SimplePluginTemplateGenerator("maven_templates/maven-enforcer-plugin.xml", DEFAULT),
            new SimplePluginTemplateGenerator("maven_templates/flatten-maven-plugin.xml", DEFAULT),
            new SimplePluginTemplateGenerator("maven_templates/ossindex-maven-plugin.xml", DEFAULT),
            new SimplePluginTemplateGenerator("maven_templates/maven-surefire-plugin.xml", DEFAULT),
            new SimplePluginTemplateGenerator("maven_templates/versions-maven-plugin.xml", DEFAULT),
            new SimplePluginTemplateGenerator("maven_templates/maven-assembly-plugin.xml", JAR_ARTIFACT),
            new SimplePluginTemplateGenerator("maven_templates/maven-jar-plugin-exclusion.xml", JAR_ARTIFACT),
            new SimplePluginTemplateGenerator("maven_templates/artifact-reference-checker-maven-plugin.xml",
                    JAR_ARTIFACT),
            new SimplePluginTemplateGenerator("maven_templates/maven-deploy-plugin.xml", MAVEN_CENTRAL),
            new SimplePluginTemplateGenerator("maven_templates/maven-gpg-plugin.xml", MAVEN_CENTRAL),
            new SimplePluginTemplateGenerator("maven_templates/maven-source-plugin.xml", MAVEN_CENTRAL),
            new SimplePluginTemplateGenerator("maven_templates/maven-javadoc-plugin.xml", MAVEN_CENTRAL),
            new SimplePluginTemplateGenerator("maven_templates/nexus-staging-maven-plugin.xml", MAVEN_CENTRAL),
            new SimplePluginTemplateGenerator("maven_templates/maven-dependency-plugin.xml", UDF_COVERAGE),
            new SimplePluginTemplateGenerator("maven_templates/native-image-maven-plugin.xml", NATIVE_IMAGE),
            new SimplePluginTemplateGenerator("maven_templates/lombok-maven-plugin.xml", LOMBOK),
            new FailsafePluginTemplateGenerator(), new JacocoPluginTemplateGenerator(),
            new ErrorCodeCrawlerPluginTemplateGenerator(),
            new SimplePluginTemplateGenerator("maven_templates/reproducible-build-maven-plugin.xml", DEFAULT));
    private static final String VERSION = "version";
    private static final String ARTIFACT_ID = "artifactId";
    private static final String GROUP_ID = "groupId";

    /**
     * Generate the content of the pom file.
     *
     * @param enabledModules list of enabled modules
     * @param groupId        group id for the generated pom file
     * @param artifactId     artifact id for the generated pom file
     * @param version        version for the generated pom file
     * @param parentPomRef   reference to a parent pom or {@code null}
     * @param repoInfo       information about the repository
     * @return pom file content
     */
    public String generatePomContent(final Collection<ProjectKeeperModule> enabledModules, final String groupId,
            final String artifactId, final String version, final ProjectKeeperConfig.ParentPomRef parentPomRef,
            final RepoInfo repoInfo) {
        return generatePomContent(new Config(enabledModules, groupId, artifactId, version, parentPomRef, repoInfo));
    }

    /**
     * Generate the content of the pom file.
     *
     * @param config config object
     * @return pom file content
     */
    private String generatePomContent(final Config config) {
        final Document document = createDocument();
        document.appendChild(document.createComment("@formatter:off"));
        document.appendChild(document
                .createComment("This file is auto-generated by project-keeper. All changes will be overwritten."));
        final Node project = buildProject(config, document);
        document.appendChild(project);
        return new PomFileIO().writePomFileToString(document);
    }

    private Node buildProject(final Config config, final Document document) {
        final ParentPomRef parentPomRef = config.getParentPomRef();
        final Collection<ProjectKeeperModule> modules = config.getEnabledModules();
        return element("http://maven.apache.org/POM/4.0.0", "project") //
                .attribute("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation",
                        "http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd") //
                .child("modelVersion", "4.0.0") //
                .child(GROUP_ID, config.getGroupId()) //
                .child(ARTIFACT_ID, config.getArtifactId()) //
                .child(VERSION, config.getVersion()) //
                .child("packaging", "pom") //
                .nullableChild(parentBuilder(parentPomRef)) //
                .child(propertiesBuilder(modules)) //
                .nullableChild(profilesBuilder(modules)) //
                .nullableChild(distributionManagementBuilder(modules)) //
                .child(licensesBuilder(config)) //
                .child(developersBuilder()) //
                .child(scmBuilder(config.getRepoInfo().getRepoName())) //
                .child(dependenciesBuilder(modules)) //
                .child(buildBuilder(modules)) //
                .build(document);
    }

    private ElementBuilder profilesBuilder(final Collection<ProjectKeeperModule> modules) {
        if (!modules.contains(NATIVE_IMAGE)) {
            return null;
        }
        return element("profiles") //
                .child(profileBuilder("default", true, Map.of("native-image.skip", "false"))) //
                .child(profileBuilder("skipNativeImage", false,
                        Map.of("native-image.skip", "true", "test.excludeTags", "native-image")));
    }

    ElementBuilder distributionManagementBuilder(final Collection<ProjectKeeperModule> modules) {
        if (!modules.contains(MAVEN_CENTRAL)) {
            return null;
        }
        return element("distributionManagement") //
                .child(element("snapshotRepository") //
                        .child("id", "ossrh").child("url", "https://oss.sonatype.org/content/repositories/snapshots")) //
                .child(element("repository") //
                        .child("id", "ossrh") //
                        .child("url", "https://oss.sonatype.org/service/local/staging/deploy/maven2/"));
    }

    private ElementBuilder profileBuilder(final String id, final boolean isDefault,
            final Map<String, String> properties) {
        final List<NodeBuilder> propertyBuilders = properties.entrySet().stream() //
                .sorted(Map.Entry.comparingByKey()) //
                .map(e -> element(e.getKey()).child(textNode(e.getValue()))) //
                .collect(Collectors.toList());
        return element("profile") //
                .child("id", id) //
                .nullableChild(isDefault ? element("activation").child("activeByDefault", "true") : null)
                .child(element("properties").children(propertyBuilders));
    }

    private ElementBuilder licensesBuilder(final Config config) {
        final String url = "https://github.com/exasol/" + config.getRepoInfo().getRepoName() + "/blob/main/LICENSE";
        return element("licenses").child( //
                element("license") //
                        .child("name", config.getRepoInfo().getLicenseName()) //
                        .child("url", url) //
                        .child("distribution", "repo"));
    }

    @Data
    private static class Config {
        private final Collection<ProjectKeeperModule> enabledModules;
        private final String groupId;
        private final String artifactId;
        private final String version;
        private final ProjectKeeperConfig.ParentPomRef parentPomRef;
        private final RepoInfo repoInfo;
    }

    private ElementBuilder scmBuilder(final String repoName) {
        final String gitUrl = "scm:git:https://github.com/exasol/" + repoName + ".git";
        return element("scm") //
                .child("connection", gitUrl) //
                .child("developerConnection", gitUrl) //
                .child("url", "https://github.com/exasol/" + repoName + "/");
    }

    private ElementBuilder developersBuilder() {
        return element("developers") //
                .child(element("developer") //
                        .child("name", "Exasol") //
                        .child("email", "opensource@exasol.com") //
                        .child("organization", "Exasol AG") //
                        .child("organizationUrl", "https://www.exasol.com/"));
    }

    private ElementBuilder parentBuilder(final ProjectKeeperConfig.ParentPomRef parentPomRef) {
        if (parentPomRef == null) {
            return null;
        }
        final String path = parentPomRef.getRelativePath();
        return element("parent") //
                .child(GROUP_ID, parentPomRef.getGroupId()) //
                .child(ARTIFACT_ID, parentPomRef.getArtifactId()) //
                .child(VERSION, parentPomRef.getVersion()) //
                .nullableChild(path == null ? null : element("relativePath").child(path));
    }

    private ElementBuilder dependenciesBuilder(final Collection<ProjectKeeperModule> enabledModules) {
        return element("dependencies") //
                .nullableChild(enabledModules.contains(LOMBOK) //
                        ? dependencyBuilder("org.projectlombok", "lombok", "1.18.24", "provided", null)
                        : null) //
                .nullableChild(enabledModules.contains(UDF_COVERAGE) //
                        ? dependencyBuilder("org.jacoco", "org.jacoco.agent", "0.8.8", "test", "runtime")
                        : null);
    }

    private ElementBuilder dependencyBuilder(final String groupId, final String artifactId, final String version,
            final String scope, final String classifier) {
        return element("dependency") //
                .child(GROUP_ID, groupId) //
                .child(ARTIFACT_ID, artifactId) //
                .child(VERSION, version) //
                .child("scope", scope) //
                .nullableChild(classifier == null ? null : element("classifier").child(classifier));
    }

    private ElementBuilder buildBuilder(final Collection<ProjectKeeperModule> enabledModules) {
        return element("build").child(pluginsBuilder(enabledModules));
    }

    private ElementBuilder propertiesBuilder(final Collection<ProjectKeeperModule> enabledModules) {
        return element("properties") //
                .child("project.build.sourceEncoding", "UTF-8") //
                .child("project.reporting.outputEncoding", "UTF-8") //
                .child("java.version", "11") //
                .child("test.excludeTags", "") //
                .nullableChild(!enabledModules.contains(MAVEN_CENTRAL) ? null : element("gpg.skip").child("true"));
    }

    private Document createDocument() {
        try {
            final Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            document.setXmlVersion("1.0");
            document.setXmlStandalone(false);
            return document;
        } catch (final ParserConfigurationException exception) {
            throw new IllegalStateException(ExaError.messageBuilder("F-PK-CORE-109")
                    .message("Failed to create document.").ticketMitigation().toString(), exception);
        }
    }

    private ElementBuilder pluginsBuilder(final Collection<ProjectKeeperModule> enabledModules) {
        final ElementBuilder builder = element("plugins");
        for (final PluginTemplateGenerator pluginGenerator : PLUGIN_GENERATORS) {
            final Optional<Node> pluginTemplate = pluginGenerator.generateTemplate(enabledModules);
            pluginTemplate.ifPresent(template -> {
                trimWhitespace(template);
                builder.child(plainNode(template));
            });
        }
        return builder;
    }
}