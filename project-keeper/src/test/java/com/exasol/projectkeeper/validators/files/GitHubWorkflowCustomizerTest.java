package com.exasol.projectkeeper.validators.files;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.startsWith;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.inOrder;

import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.exasol.projectkeeper.shared.config.workflow.WorkflowStep;

@ExtendWith(MockitoExtension.class)
class GitHubWorkflowCustomizerTest {

    @Mock
    GitHubWorkflowCustomizer.WorkflowCustomizer customizerMock1;
    @Mock
    GitHubWorkflowCustomizer.WorkflowCustomizer customizerMock2;

    @Test
    void startsWithGeneratedComment() {
        final String yaml = getCustomizedContent("""
                jobs:
                  build:
                    steps:
                """);
        assertThat(yaml, startsWith("# This file was generated by Project Keeper.\n"));
    }

    @Test
    void noChangesWithEmptyCustomizerList() {
        assertThat(getCustomizedContent("""
                jobs:
                  build:
                    steps:
                """), equalTo("""
                # This file was generated by Project Keeper.
                jobs:
                  build: {
                    steps: null
                  }
                """));
    }

    @Test
    void noChangesWithNoOpCustomizer() {
        assertThat(getCustomizedContent("""
                jobs:
                  build:
                    steps:
                """, (workflow) -> {
        }), equalTo("""
                # This file was generated by Project Keeper.
                jobs:
                  build: {
                    steps: null
                  }
                """));
    }

    @Test
    void customizerUpdatesWorkflow() {
        assertThat(getCustomizedContent("""
                jobs:
                  build:
                    steps:
                      - id: step1
                """, (workflow) -> {
            workflow.getJob("build").insertStepAfter("step1", WorkflowStep.createStep(Map.of("id", "step2")));
        }), equalTo("""
                # This file was generated by Project Keeper.
                jobs:
                  build:
                    steps:
                      - {
                        id: step1
                      }
                      - {
                        id: step2
                      }
                """));
    }

    @Test
    void customizerCalledInOrder() {
        new GitHubWorkflowCustomizer(customizerMock1, customizerMock2).customizeContent("");
        final InOrder inOrder = inOrder(customizerMock1, customizerMock2);
        inOrder.verify(customizerMock1).applyCustomization(any());
        inOrder.verify(customizerMock2).applyCustomization(any());
        inOrder.verifyNoMoreInteractions();
    }

    private String getCustomizedContent(final String workflowTemplate,
            final GitHubWorkflowCustomizer.WorkflowCustomizer... customizer) {
        return new GitHubWorkflowCustomizer(customizer).customizeContent(workflowTemplate);
    }
}
