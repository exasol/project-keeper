package com.exasol.projectkeeper.dependencyupdate;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

// [utest->dsn~dependency-updater.read-vulnerability-info~1]
class VulnerabilityInfoProviderTest {

    @Test
    void returnsEmptyListForMissingSystemProperty() {
        assertThat(getVulnerabilities(null), empty());
    }

    @ParameterizedTest
    @ValueSource(strings = { "", " ", "\t", "\n", "\r\n" })
    void returnsEmptyListForBlankValues(final String systemPropertyValue) {
        assertThat(getVulnerabilities(systemPropertyValue), empty());
    }

    @Test
    void emptyJsonObject() {
        assertThat(getVulnerabilities("{}"), contains(new Vulnerability(null, null, null, null, null, null)));
    }

    @Test
    void filledJsonObject() {
        assertThat(getVulnerabilities(removeLineBreaks("""
                {
                    "cve": "CVE-2017-10355",
                    "cwe": "CWE-833",
                    "description": "sonatype-2017-0348 - xerces:xercesImpl - Denial of Service (DoS)",
                    "coordinates": "xerces:xercesImpl:jar:2.12.2:test",
                    "references": ["https://link1", "https://link2"],
                    "issue_url": "https://github.com/exasol/testing-release-robot/issues/709"
                }""")),
                contains(new Vulnerability("CVE-2017-10355", "CWE-833",
                        "sonatype-2017-0348 - xerces:xercesImpl - Denial of Service (DoS)",
                        "xerces:xercesImpl:jar:2.12.2:test", List.of("https://link1", "https://link2"),
                        "https://github.com/exasol/testing-release-robot/issues/709")));
    }

    @ParameterizedTest
    @ValueSource(strings = { "\n", "\n\r", "\r\n" })
    void multipleJsonObject(final String lineBreak) {
        assertThat(getVulnerabilities(removeLineBreaks("""
                {
                    "cve": "cve1",
                    "cwe": "cwe1",
                    "description": "desc1",
                    "coordinates": "coord1",
                    "references": ["ref11", "ref12"],
                    "issue_url": "issue1"
                }""") //
                + lineBreak //
                + removeLineBreaks("""
                        {
                            "cve": "cve2",
                            "cwe": "cwe2",
                            "description": "desc2",
                            "coordinates": "coord2",
                            "references": ["ref21", "ref22"],
                            "issue_url": "issue2"
                        }""")),
                contains(new Vulnerability("cve1", "cwe1", "desc1", "coord1", List.of("ref11", "ref12"), "issue1"),
                        new Vulnerability("cve2", "cwe2", "desc2", "coord2", List.of("ref21", "ref22"), "issue2")));
    }

    private String removeLineBreaks(final String multiLineText) {
        return multiLineText.replace("\n", "");
    }

    @Test
    void failsParsingForInvalidContent() {
        final IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> getVulnerabilities("invalid"));
        assertThat(exception.getMessage(), startsWith(
                "E-PK-CORE-180: Error parsing vulnerability info 'invalid' as JSON from system property 'project-keeper:vulnerabilities'"));
    }

    private List<Vulnerability> getVulnerabilities(final String systemPropertyValue) {
        setSystemProperty(systemPropertyValue);
        try {
            return new VulnerabilityInfoProvider().getVulnerabilities();
        } finally {
            setSystemProperty(null);
        }
    }

    private void setSystemProperty(final String systemPropertyValue) {
        if (systemPropertyValue == null) {
            System.clearProperty(VulnerabilityInfoProvider.SYSTEM_PROPERTY_NAME);
        } else {
            System.setProperty(VulnerabilityInfoProvider.SYSTEM_PROPERTY_NAME, systemPropertyValue);
        }
    }
}
