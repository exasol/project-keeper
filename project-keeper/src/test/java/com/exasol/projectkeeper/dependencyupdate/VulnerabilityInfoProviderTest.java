package com.exasol.projectkeeper.dependencyupdate;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

class VulnerabilityInfoProviderTest {

    @Test
    void returnsEmptyListForMissingSystemProperty() {
        assertThat(getVulnerabilities(null), empty());
    }

    @ParameterizedTest
    @ValueSource(strings = { "", " ", "\t", "\n", "\r\n" })
    void returnsEmptyListForBlankValues(final String systemPropertyValue) {
        assertThat(getVulnerabilities(systemPropertyValue), empty());
    }

    @Test
    void emptyJsonObject() {
        assertThat(getVulnerabilities("{}"), contains(new Vulnerability(null, null)));
    }

    @Test
    void failsParsingForInvalidContent() {
        final IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
                () -> getVulnerabilities("invalid"));
        assertThat(exception.getMessage(), startsWith(
                "E-PK-CORE-180: Error parsing vulnerability info 'invalid' as JSON from system property 'project-keeper:vulnerabilities'"));
    }

    private List<Vulnerability> getVulnerabilities(final String systemPropertyValue) {
        setSystemProperty(systemPropertyValue);
        try {
            return new VulnerabilityInfoProvider().getVulnerabilities();
        } finally {
            setSystemProperty(null);
        }
    }

    private void setSystemProperty(final String systemPropertyValue) {
        if (systemPropertyValue == null) {
            System.clearProperty(VulnerabilityInfoProvider.SYSTEM_PROPERTY_NAME);
        } else {
            System.setProperty(VulnerabilityInfoProvider.SYSTEM_PROPERTY_NAME, systemPropertyValue);
        }
    }
}
